{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-course-saku2020-ws"
		},
		"ls_serverless_sql_pool_db_nyc_taxi_ldw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_serverless_sql_pool_db_nyc_taxi_ldw'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-saku2020-ws-ondemand.sql.azuresynapse.net,1433;Initial Catalog=nyc_taxi_ldw"
		},
		"synapse-course-saku2020-ws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-course-saku2020-ws-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-saku2020-ws.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"ls_synapsecourse_saku2020_dl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecoursesaku2020dl.dfs.core.windows.net/"
		},
		"synapse-course-saku2020-ws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecoursesaku2020dl.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete silver taxi_zone folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete silver taxi_zone folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone;"
								},
								{
									"type": "Query",
									"text": "CREATE EXTERNAL TABLE silver.taxi_zone\nWITH(\n    LOCATION='silver/taxi_zone',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=parquet_file_format\n)\nAS\nSELECT *\nFROM bronze.taxi_zone;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsecourse_saku2020_dl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/taxi_zone",
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "location_id",
						"type": "INT_16"
					},
					{
						"name": "borough",
						"type": "UTF8"
					},
					{
						"name": "zone",
						"type": "UTF8"
					},
					{
						"name": "service_zone",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsecourse_saku2020_dl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_serverless_sql_pool_db_nyc_taxi_ldw_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_synapsecourse_saku2020_dl')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_synapsecourse_saku2020_dl_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-saku2020-ws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-course-saku2020-ws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-saku2020-ws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-course-saku2020-ws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_check_for_duplicates')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n--Check for duplicates in the Taxi zone data\n\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0', \n        FIRSTROW=2,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    )\n    WITH(\n\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )\n    AS [result];\n\n\n    select location_id, count(1) as number_of_records\n    FROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0', \n        FIRSTROW=2,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    )\n    WITH(\n\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )\n    AS [result]\n    group by location_id having count(1) > 1\n    order by location_id ;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n--Create rate_code table on silver schema\n\nIF OBJECT_ID('silver.rate_code') IS NOT NULL\n    DROP EXTERNAL TABLE silver.rate_code\nGO\nCREATE EXTERNAL TABLE silver.rate_code\nWITH(\n    LOCATION='silver/rate_code',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=parquet_file_format\n)\nAS\nSELECT rate_code_id,rate_code\nFROM OPENROWSET(\n    BULK 'raw/rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR ='0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n) \nWITH (\n    jsonDoc NVARCHAR(MAX)\n)\nas rate_code\nCROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        rate_code_id TINYINT,\n        rate_code VARCHAR(20) \n    );\n\nSELECT * FROM silver.rate_code;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n--Create payment_type table on silver schema\n\nIF OBJECT_ID('silver.payment_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.payment_type\nGO\nCREATE EXTERNAL TABLE silver.payment_type\nWITH(\n    LOCATION='silver/payment_type',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=parquet_file_format\n)\nAS\nSELECT payment_type, description\nFROM OPENROWSET(\n    BULK 'raw/payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR ='0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0a'\n) \nWITH (\n    jsonDoc NVARCHAR(MAX)\n) as payment_type\n\nCROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        payment_type SMALLINT '$.payment_type',\n        description VARCHAR(20) '$.payment_type_desc'\n    );\n\nSELECT * FROM silver.payment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_data_quality_checks')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n-- Identify any data quality issues in trip total amount\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS result;\n\n\nSELECT\n    min(total_amount) as min_total_amount,\n    max(total_amount) as max_total_amount,\n    avg(total_amount) as avg_total_amount,\n    count(1) as total_number_of_records,\n    count(total_amount) as not_null_total_number_of_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS result;\n\n    -- Find negative total amount record\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS result\n    where total_amount<0;\n    \nSELECT\n    payment_type,\n    count(1) as number_of_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS result\n    group by payment_type;\n    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n/*\n--Create vendor table on silver schema\n\nIF OBJECT_ID('silver.trip_data_green') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_data_green\nGO\n\nCREATE EXTERNAL TABLE silver.trip_data_green\nWITH(\n    LOCATION='silver/trip_data_green',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=parquet_file_format\n)\nAS\nSELECT *\nFROM bronze.trip_data_green_csv;\n\nSELECT * FROM silver.trip_data_green;\n\n*/\n\nEXEC silver.usp_silver_trip_data_green '2020' , '01'\nEXEC silver.usp_silver_trip_data_green '2020' , '02'\nEXEC silver.usp_silver_trip_data_green '2020' , '03'\nEXEC silver.usp_silver_trip_data_green '2020' , '04'\nEXEC silver.usp_silver_trip_data_green '2020' , '05'\nEXEC silver.usp_silver_trip_data_green '2020' , '06'\nEXEC silver.usp_silver_trip_data_green '2020' , '07'\nEXEC silver.usp_silver_trip_data_green '2020' , '08'\nEXEC silver.usp_silver_trip_data_green '2020' , '09'\nEXEC silver.usp_silver_trip_data_green '2020' , '10'\nEXEC silver.usp_silver_trip_data_green '2020' , '11'\nEXEC silver.usp_silver_trip_data_green '2020' , '12'\nEXEC silver.usp_silver_trip_data_green '2021' , '01'\nEXEC silver.usp_silver_trip_data_green '2021' , '02'\nEXEC silver.usp_silver_trip_data_green '2021' , '03'\nEXEC silver.usp_silver_trip_data_green '2021' , '04'\nEXEC silver.usp_silver_trip_data_green '2021' , '05'\nEXEC silver.usp_silver_trip_data_green '2021' , '06'\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_join_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n\nSELECT\n     taxi_zone.*,\n     trip_data.*\nFROM\n    OPENROWSET(\n                BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n                DATA_SOURCE = 'nyc_taxi_data_raw',\n                FORMAT = 'PARQUET'\n    ) \n    AS trip_data\n\n    JOIN\n\n    OPENROWSET(\n                BULK 'taxi_zone.csv',\n                DATA_SOURCE='nyc_taxi_data_raw',\n                FORMAT = 'CSV',\n                PARSER_VERSION = '2.0', \n                FIRSTROW=2\n            )\n            WITH(\n                location_id SMALLINT 1,\n                borough VARCHAR(15) 2,\n                zone VARCHAR(50) 3,\n                service_zone VARCHAR(15) 4\n            )\n            AS taxi_zone\n    ON trip_data.PULocationID=taxi_zone.location_id;\n\n\n    SELECT\n     taxi_zone.borough,\n     count(1) as number_of_trips\nFROM\n    OPENROWSET(\n                BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n                DATA_SOURCE = 'nyc_taxi_data_raw',\n                FORMAT = 'PARQUET'\n    ) \n    AS trip_data\n\n    JOIN\n\n    OPENROWSET(\n                BULK 'taxi_zone.csv',\n                DATA_SOURCE='nyc_taxi_data_raw',\n                FORMAT = 'CSV',\n                PARSER_VERSION = '2.0', \n                FIRSTROW=2\n            )\n            WITH(\n                location_id SMALLINT 1,\n                borough VARCHAR(15) 2,\n                zone VARCHAR(50) 3,\n                service_zone VARCHAR(15) 4\n            )\n            AS taxi_zone\n    ON trip_data.PULocationID=taxi_zone.location_id\n    group by taxi_zone.borough\n    order by taxi_zone.borough;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_create_silver_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n--CREATE VIEW FOR trip_data_green\nDROP VIEW IF EXISTS silver.vw_trip_data_green;\nGO\n\nCREATE VIEW silver.vw_trip_data_green\nAS\nSELECT \n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) WITH(\n        vendor_id INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT,\n        pu_location_id INT,\n        do_location_id INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        trip_amount FLOAT,\n        fare_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )\n    AS result;\nGO\nSELECT * from silver.vw_trip_data_green\nWHERE year='2020' and month='01';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_simple_transformation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n--Number of trips made by duration in hours\n\nSELECT top 100\n    DATEDIFF(minute, lpep_pickup_datetime,lpep_dropoff_datetime)/60 AS from_hour,\n    (DATEDIFF(minute, lpep_pickup_datetime,lpep_dropoff_datetime)/60)+1 AS to_hour,\n    COUNT(1) as number_of_trips\nFROM\n\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT='PARQUET'\n    ) as trip_data\n   GROUP BY DATEDIFF(minute, lpep_pickup_datetime,lpep_dropoff_datetime)/60,\n        (DATEDIFF(minute, lpep_pickup_datetime,lpep_dropoff_datetime)/60)+1\n    ORDER BY from_hour, to_hour;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_create_gold_trip_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n/*\nCampaign Requirement\nLets start with the select statement required to satisfy the requirement\n*/\n\n/*\nSELECT \n    td.year,\n    td.month,\n    CONVERT(DATE,td.lpep_pickup_datetime) AS trip_date,\n    tz.borough,\n    cal.day_name as trip_day,\n    CASE WHEN cal.day_name in ('Saturday','Sunday') THEN 'Y' ELSE 'N' END as trip_day_weekend_ind,\n    SUM(CASE WHEN pt.description='Credit card' THEN 1 ELSE 0 END ) AS card_trip_count,\n    SUM(CASE WHEN pt.description='Cash' THEN 1 ELSE 0 END ) AS cash_trip_count\n\nFROM\n    silver.vw_trip_data_green td\n    JOIN  silver.taxi_zone tz ON (td.pu_location_id=tz.location_id)\n    JOIN silver.calendar cal ON (cal.date =convert(date, td.lpep_pickup_datetime))\n    LEFT JOIN silver.payment_type pt ON (pt.payment_type=td.payment_type)\n\nWHERE td.year ='2020'\n AND td.month ='01'\n\n GROUP BY \n td.year,\n td.month,\n tz.borough,\n CONVERT(DATE, td.lpep_pickup_datetime),\n cal.day_name;\n\n */\n\nEXEC gold.usp_gold_trip_data_green '2020','01';\nEXEC gold.usp_gold_trip_data_green '2020' , '02';\nEXEC gold.usp_gold_trip_data_green '2020' , '03';\nEXEC gold.usp_gold_trip_data_green '2020' , '04';\nEXEC gold.usp_gold_trip_data_green '2020' , '05';\nEXEC gold.usp_gold_trip_data_green '2020' , '06';\nEXEC gold.usp_gold_trip_data_green '2020' , '07';\nEXEC gold.usp_gold_trip_data_green '2020' , '08';\nEXEC gold.usp_gold_trip_data_green '2020' , '09';\nEXEC gold.usp_gold_trip_data_green '2020' , '10';\nEXEC gold.usp_gold_trip_data_green '2020' , '11';\nEXEC gold.usp_gold_trip_data_green '2020' , '12';\nEXEC gold.usp_gold_trip_data_green '2021' , '01';\nEXEC gold.usp_gold_trip_data_green '2021' , '02';\nEXEC gold.usp_gold_trip_data_green '2021' , '03';\nEXEC gold.usp_gold_trip_data_green '2021' , '04';\nEXEC gold.usp_gold_trip_data_green '2021' , '05';\nEXEC gold.usp_gold_trip_data_green '2021' , '06';\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_discovery_assignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n/*\nIdentify the percentage of cash and credit card trips by borough\nExample Data as below\n\n------------------------------------------------------------------------------------------------------------------\nBorough     total_trips     cash_trips      card_trips      cash_trips_percentage       card_trips_percentage\n------------------------------------------------------------------------------------------------------------------\nBronx\nBrooklyn\n------------------------------------------------------------------------------------------------------------------\n\n*/\n\nWITH v_payment_type AS\n  (\n    SELECT CAST(JSON_VALUE(jsonDoc, '$.payment_type')  AS SMALLINT) payment_type,\n    CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') AS VARCHAR(15))  payment_type_desc\n    FROM OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH (\n        jsonDoc NVARCHAR(MAX)\n    )\n    as payment_type\n) ,\n\n v_taxi_zone as (\n    SELECT location_id, borough \n    FROM \n    OPENROWSET(\n                BULK 'taxi_zone.csv',\n                DATA_SOURCE='nyc_taxi_data_raw',\n                FORMAT = 'CSV',\n                PARSER_VERSION = '2.0', \n                FIRSTROW=2\n            )\n            WITH(\n                location_id SMALLINT 1,\n                borough VARCHAR(15) 2,\n                zone VARCHAR(50) 3,\n                service_zone VARCHAR(15) 4\n            ) AS taxi_zone\n  ),\n  v_trip_data AS \n  (\n    SELECT *\n    FROM\n        OPENROWSET(\n            BULK 'trip_data_green_parquet/year=2020/month=01/',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT='PARQUET'\n        ) as trip_data\n  )\n\n  SELECT \n  v_taxi_zone.borough,\n  COUNT(1) as total_trips,\n  SUM(CASE WHEN v_payment_type.payment_type_desc='Cash' THEN 1 ELSE 0 END) AS cash_trips,\n  SUM(CASE WHEN v_payment_type.payment_type_desc='Credit Card' THEN 1 ELSE 0 END) AS card_trips,\n  CAST((SUM(CASE WHEN v_payment_type.payment_type_desc='Cash' THEN 1 ELSE 0 END)/CAST(COUNT(1) AS DECIMAL))*100 AS DECIMAL(5,2)) AS cash_trips_percentage,\nCAST((SUM(CASE WHEN v_payment_type.payment_type_desc='Credit Card' THEN 1 ELSE 0 END)/CAST(COUNT(1) AS DECIMAL))*100 AS DECIMAL(5,2)) AS card_trips_percentage\n  FROM v_trip_data\n  LEFT JOIN v_payment_type ON v_trip_data.payment_type = v_payment_type.payment_type\n  LEFT JOIN v_taxi_zone ON v_trip_data.PULocationID=v_taxi_zone.location_id\nWHERE v_payment_type.payment_type_desc in ('Cash','Credit Card')\n GROUP BY v_taxi_zone.borough \n ORDER BY v_taxi_zone.borough;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_create_gold_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n--CREATE VIEW FOR trip_data_green\nDROP VIEW IF EXISTS gold.vw_trip_data_green;\nGO\n\nCREATE VIEW gold.vw_trip_data_green\nAS\nSELECT \n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) WITH(\n       borough VARCHAR(15),\n       trip_date DATE,\n       trip_day VARCHAR(10),\n       trip_day_weekend_ind CHAR(1),\n       card_trip_count INT,\n       cash_trip_count INT,\n       street_hail_trip_count INT,\n       dispatch_trip_count INT,\n       trip_distance FLOAT,\n       trip_duration INT,\n       fare_amount FLOAT\n    )\n    AS result;\nGO\n\n\nSELECT * from gold.vw_trip_data_green\nWHERE year='2020' and month='01';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_databases')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE master\n\nCREATE DATABASE nyc_taxi_ldw\nGO\n\nALTER DATABASE nyc_taxi_ldw COLLATE Latin1_General_100_BIN2_UTF8;\nGO\n\nUSE nyc_taxi_ldw\nGO\n\nCREATE SCHEMA bronze\nGO\nCREATE SCHEMA silver\nGO\nCREATE SCHEMA gold\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecoursesaku2020dl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) AS [result]\n\n--Examine the data types for the columns\n\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''abfss://nyc-taxi-data@synapsecoursesaku2020dl.dfs.core.windows.net/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR='','',\n        ROWTERMINATOR=''\\n''\n    ) AS [result]'\n\n\n\nSELECT\n    MAX(LEN(LocationID)) AS LEN_LocationID,\n    MAX(LEN(Borough)) AS LEN_Borough,\n    MAX(LEN(Zone)) AS LEN_Zone,\n    MAX(LEN(service_zone)) AS LEN_service_zone\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecoursesaku2020dl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) AS [result];\n\n\n    --Use WITH clause to provide explicit data type\n    SELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecoursesaku2020dl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    )\n    WITH(\n\n        LocationID SMALLINT,\n        Borough VARCHAR(15) COLLATE Latin1_General_100_ci_ai_sc_utf8,\n        Zone VARCHAR(50) COLLATE Latin1_General_100_ci_ai_sc_utf8,\n        service_zone VARCHAR(15) COLLATE Latin1_General_100_ci_ai_sc_utf8\n    )\n    \n    AS [result];\nEXEC sp_describe_first_result_set N'SELECT\n     *\nFROM\n    OPENROWSET(\n        BULK ''abfss://nyc-taxi-data@synapsecoursesaku2020dl.dfs.core.windows.net/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR='','',\n        ROWTERMINATOR=''\\n''\n    )\n    WITH(\n\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )\n    \n    AS [result]';\n\n    create DATABASE nyc_taxi_discovery;\n\n    SELECT * FROM sys.databases;\n    alter database nyc_taxi_discovery COLLATE Latin1_General_100_ci_ai_sc_utf8;\n\n    SELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecoursesaku2020dl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    )\n    WITH(\n\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )\n\n    AS [result];\n\n    --Select only subset of columns\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecoursesaku2020dl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        --HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    )\n    WITH(\n\n        Borough VARCHAR(15),\n        Zone VARCHAR(50)\n    )\n\n    AS [result];\n\n    --Read data from a file without header\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecoursesaku2020dl.dfs.core.windows.net/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n       -- HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    )\n\n    AS [result];\n\nSELECT\n     Zone, Borough\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecoursesaku2020dl.dfs.core.windows.net/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n       -- HEADER_ROW=TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    )\n    WITH(\n\n        Borough VARCHAR(15) 2,\n        Zone VARCHAR(50) 3\n    )\n\n    AS [result];\n\n    --Fixed columns\n\n    SELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecoursesaku2020dl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW=2,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    )\n    WITH(\n\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )\n\n    AS [result];\n\n    --Debug\n\n    SELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecoursesaku2020dl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0', --Use parser version 1.0 for debug purpose\n        FIRSTROW=2,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    )\n    WITH(\n\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )\n\n    AS [result];\n\n    --Create External Data Source\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data\nWITH(\nLOCATION ='https://synapsecoursesaku2020dl.dfs.core.windows.net/nyc-taxi-data'\n)\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data_raw\nWITH(\nLOCATION ='abfss://nyc-taxi-data@synapsecoursesaku2020dl.dfs.core.windows.net/raw'\n)\n\nDROP EXTERNAL DATA SOURCE nyc_taxi_data;\nDROP EXTERNAL DATA SOURCE nyc_taxi_data_raw;\n\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0', \n        FIRSTROW=2,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    )\n    WITH(\n\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )\n    AS [result];\n\n    select * FROM sys.external_data_sources;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_usp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_data_green\n\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE silver.trip_data_green_'+@year+'_'+@month +\n        ' WITH\n            (\n                DATA_SOURCE=nyc_taxi_src,\n                LOCATION = ''silver/trip_data_green/year='+@year+'/month='+@month+''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n        SELECT \n            [VendorID] as vendor_id\n            ,lpep_pickup_datetime\n            ,lpep_dropoff_datetime\n            ,store_and_fwd_flag\n            ,RatecodeID as rate_code_id\n            ,PULocationID as pu_location_id\n            ,DOLocationID as do_location_id\n            ,passenger_count\n            ,trip_distance\n            ,fare_amount\n            ,extra\n            ,mta_tax\n            ,trip_amount\n            ,tolls_amount\n            ,ehail_fee\n            ,improvement_surcharge\n            ,total_amount\n            ,payment_type\n            ,trip_type\n            ,congestion_surcharge\n        FROM bronze.vw_trip_data_green_csv\n        where year = ''' +@year +'''\n        and month = '''+@month +'''';\n\n        PRINT(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n    'DROP EXTERNAL TABLE silver.trip_data_green_'+@year+'_'+@month;\n    PRINT(@drop_sql_stmt)\n\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;\n\nSELECT \n            [VendorID] as vendor_id\n            ,lpep_pickup_datetime\n            ,lpep_dropoff_datetime\n            ,store_and_fwd_flag\n            ,RatecodeID as rate_code_id\n            ,PULocationID as pu_location_id\n            ,DOLocationID as do_location_id\n            ,passenger_count\n            ,trip_distance\n            ,fare_amount\n            ,extra\n            ,mta_tax\n            ,trip_amount\n            ,tolls_amount\n            ,ehail_fee\n            ,improvement_surcharge\n            ,total_amount\n            ,payment_type\n            ,trip_type\n            ,congestion_surcharge\n        FROM bronze.vw_trip_data_green_csv\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_external_source')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF NOT EXISTS(select * from sys.external_data_sources where name='nyc_taxi_src')\n    CREATE EXTERNAL DATA SOURCE nyc_taxi_src\n    WITH\n    (\n        LOCATION = 'https://synapsecoursesaku2020dl.dfs.core.windows.net/nyc-taxi-data'\n    );\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_usp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE gold.usp_gold_trip_data_green\n\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE gold.trip_data_green_'+@year+'_'+@month +\n        ' WITH\n            (\n                DATA_SOURCE=nyc_taxi_src,\n                LOCATION = ''gold/trip_data_green/year='+@year+'/month='+@month+''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n        SELECT \n            td.year,\n            td.month,\n            CONVERT(DATE,td.lpep_pickup_datetime) AS trip_date,\n            tz.borough,\n            cal.day_name as trip_day,\n            CASE WHEN cal.day_name in (''Saturday'',''Sunday'') THEN ''Y'' ELSE ''N'' END as trip_day_weekend_ind,\n            SUM(CASE WHEN pt.description=''Credit card'' THEN 1 ELSE 0 END ) AS card_trip_count,\n            SUM(CASE WHEN pt.description=''Cash'' THEN 1 ELSE 0 END ) AS cash_trip_count,\n            SUM(CASE WHEN tt.trip_type_desc=''Street-hail'' THEN 1 ELSE 0 END) as street_hail_trip_count,\n            SUM(CASE WHEN tt.trip_type_desc=''Dispatch'' THEN 1 ELSE 0 END) as dispatch_hail_trip_count,\n            SUM(td.trip_distance) as trip_distance,\n            SUM(DATEDIFF(MINUTE, td.lpep_pickup_datetime,td.lpep_dropoff_datetime)) AS trip_duration,\n            SUM(td.fare_amount) as fare_amount\n\n        FROM\n            silver.vw_trip_data_green td\n            JOIN  silver.taxi_zone tz ON (td.pu_location_id=tz.location_id)\n            JOIN silver.calendar cal ON (cal.date =convert(date, td.lpep_pickup_datetime))\n            LEFT JOIN silver.payment_type pt ON (pt.payment_type=td.payment_type)\n            JOIN silver.trip_type tt ON (td.trip_type=tt.trip_type)\n        WHERE td.year = ''' +@year +'''\n        and td.month = '''+@month +'''\n        GROUP BY \n            td.year,\n            td.month,\n            tz.borough,\n            CONVERT(DATE, td.lpep_pickup_datetime),\n            cal.day_name';\n\n    PRINT(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n    'DROP EXTERNAL TABLE gold.trip_data_green_'+@year+'_'+@month;\n    PRINT(@drop_sql_stmt)\n\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_usp_gold_trip_data_green_1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE gold.usp_gold_trip_data_green\n\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE gold.trip_data_green_'+@year+'_'+@month +\n        ' WITH\n            (\n                DATA_SOURCE=nyc_taxi_src,\n                LOCATION = ''gold/trip_data_green/year='+@year+'/month='+@month+''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n        SELECT \n            td.year,\n            td.month,\n            CONVERT(DATE,td.lpep_pickup_datetime) AS trip_date,\n            tz.borough,\n            cal.day_name as trip_day,\n            CASE WHEN cal.day_name in (''Saturday'',''Sunday'') THEN ''Y'' ELSE ''N'' END as trip_day_weekend_ind,\n            SUM(CASE WHEN pt.description=''Credit card'' THEN 1 ELSE 0 END ) AS card_trip_count,\n            SUM(CASE WHEN pt.description=''Cash'' THEN 1 ELSE 0 END ) AS cash_trip_count\n\n        FROM\n            silver.vw_trip_data_green td\n            JOIN  silver.taxi_zone tz ON (td.pu_location_id=tz.location_id)\n            JOIN silver.calendar cal ON (cal.date =convert(date, td.lpep_pickup_datetime))\n            LEFT JOIN silver.payment_type pt ON (pt.payment_type=td.payment_type)\n        WHERE td.year = ''' +@year +'''\n        and td.month = '''+@month +'''\n        GROUP BY \n            td.year,\n            td.month,\n            tz.borough,\n            CONVERT(DATE, td.lpep_pickup_datetime),\n            cal.day_name';\n\n    PRINT(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n    'DROP EXTERNAL TABLE gold.trip_data_green_'+@year+'_'+@month;\n    PRINT(@drop_sql_stmt)\n\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_external_file_format')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n\nIF NOT EXISTS(select * from sys.external_file_formats where name='csv_file_format')\n    CREATE EXTERNAL FILE FORMAT csv_file_format\n    WITH(\n\n        FORMAT_TYPE=DELIMITEDTEXT,\n        FORMAT_OPTIONS (\n\n            FIELD_TERMINATOR =',',\n            STRING_DELIMITER='\"',\n            FIRST_ROW=2,\n            USE_TYPE_DEFAULT=FALSE,\n            ENCODING ='UTF8',\n            PARSER_VERSION='2.0'\n\n        )\n    );\n\nIF NOT EXISTS(select * from sys.external_file_formats where name='csv_file_format_pv1')\n    CREATE EXTERNAL FILE FORMAT csv_file_format_pv1\n    WITH(\n\n        FORMAT_TYPE=DELIMITEDTEXT,\n        FORMAT_OPTIONS (\n\n            FIELD_TERMINATOR =',',\n            STRING_DELIMITER='\"',\n            FIRST_ROW=2,\n            USE_TYPE_DEFAULT=FALSE,\n            ENCODING ='UTF8',\n            PARSER_VERSION='1.0'\n\n        )\n    );\nIF NOT EXISTS(select * from sys.external_file_formats where name='tsv_file_format')\n    CREATE EXTERNAL FILE FORMAT tsv_file_format_pv1\n    WITH(\n\n        FORMAT_TYPE=DELIMITEDTEXT,\n        FORMAT_OPTIONS (\n\n            FIELD_TERMINATOR ='\\t',\n            STRING_DELIMITER='\"',\n            FIRST_ROW=2,\n            USE_TYPE_DEFAULT=FALSE,\n            ENCODING ='UTF8',\n            PARSER_VERSION='2.0'\n\n        )\n    );\n\nIF NOT EXISTS(select * from sys.external_file_formats where name='tsv_file_format_pv1')\n    CREATE EXTERNAL FILE FORMAT tsv_file_format_pv1\n    WITH(\n\n        FORMAT_TYPE=DELIMITEDTEXT,\n        FORMAT_OPTIONS (\n\n            FIELD_TERMINATOR ='\\t',\n            STRING_DELIMITER='\"',\n            FIRST_ROW=2,\n            USE_TYPE_DEFAULT=FALSE,\n            ENCODING ='UTF8',\n            PARSER_VERSION='1.0'\n\n        )\n    );\n\nDROP EXTERNAL FILE FORMAT parquet_file_format;\nIF NOT EXISTS(select * from sys.external_file_formats where name='parquet_file_format')\n    CREATE EXTERNAL FILE FORMAT parquet_file_format\n    WITH(\n        FORMAT_TYPE = PARQUET,\n         DATA_COMPRESSION ='org.apache.hadoop.io.compress.SnappyCodec'\n    );\n\nDROP EXTERNAL FILE FORMAT delta_file_format;\nIF NOT EXISTS(select * from sys.external_file_formats where name='delta_file_format')\n    CREATE EXTERNAL FILE FORMAT delta_file_format\n    WITH(\n        FORMAT_TYPE = DELTA,\n        DATA_COMPRESSION ='org.apache.hadoop.io.compress.SnappyCodec'\n    );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_explore_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT * \nFROM OPENROWSET(\n    BULK 'vendor_unquoted.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FIELDTERMINATOR = ',',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n)\n\nas vendor_unquoted",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_usp_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_taxi_zone\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n        DROP EXTERNAL TABLE silver.taxi_zone ;\n\n    CREATE EXTERNAL TABLE silver.taxi_zone\n    WITH(\n        LOCATION='silver/taxi_zone',\n        DATA_SOURCE=nyc_taxi_src,\n        FILE_FORMAT=parquet_file_format\n    )\n    AS\n    SELECT *\n    FROM bronze.taxi_zone;\nEND\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_ create_bronze_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n--create taxi_zone table\nIF OBJECT_ID('bronze.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.taxi_zone;\n\ncreate EXTERNAL TABLE bronze.taxi_zone\n(\n    location_id SMALLINT ,\n    borough VARCHAR(15) ,\n    zone VARCHAR(50) ,\n    service_zone VARCHAR(15) \n)\nWITH (\n    LOCATION ='raw/taxi_zone.csv',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=csv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/taxi_zone'\n)\n\nSELECT * from bronze.taxi_zone;\n\n\n--Create calendar table\n\nIF OBJECT_ID('bronze.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.calendar;\n\ncreate EXTERNAL TABLE bronze.calendar\n(\n    date_key INT ,\n    date DATE ,\n    year SMALLINT ,\n    month TINYINT, \n    day TINYINT, \n    day_name VARCHAR(10), \n    day_of_year SMALLINT, \n    week_of_month TINYINT, \n    week_of_year TINYINT, \n    month_name VARCHAR(10), \n    year_month INT, \n    year_week INT\n)\nWITH (\n    LOCATION ='raw/calendar.csv',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=csv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/calendar'\n);\n\nSELECT * from bronze.calendar;\n\n\n--Create vendor table\n\nIF OBJECT_ID('bronze.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vendor;\n\ncreate EXTERNAL TABLE bronze.vendor\n(\n    vendor_id INT ,\n    vendor_name VARCHAR(50)\n)\nWITH (\n    LOCATION ='raw/vendor.csv',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=csv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/vendor'\n);\n\nSELECT * from bronze.vendor;\n\n--Create trip_type table\n\nIF OBJECT_ID('bronze.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_type;\n\ncreate EXTERNAL TABLE bronze.trip_type\n(\n    trip_type INT ,\n    trip_type_desc VARCHAR(50)\n)\nWITH (\n    LOCATION ='raw/trip_type.tsv',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=tsv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejections/trip_type'\n);\n\nSELECT * from bronze.trip_type;\n\n--Create trip_data_green_csv table\n\nIF OBJECT_ID('bronze.trip_data_green_csv') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_csv;\n\ncreate EXTERNAL TABLE bronze.trip_data_green_csv\n(\n    VendorID INT ,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag char(1),\n    RatecodeID INT,\n    PULocationID INT,\n    DOLocationID INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee FLOAT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type FLOAT,\n    trip_type SMALLINT,\n    congestion_surcharge FLOAT\n)\nWITH (\n    LOCATION ='raw/trip_data_green_csv/year=*/month=*/*',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=csv_file_format\n);\n\nSELECT top 100 * from bronze.trip_data_green_csv;\n\n--Create trip_data_green_parquet table\n\n\nIF OBJECT_ID('bronze.trip_data_green_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_parquet;\n\ncreate EXTERNAL TABLE bronze.trip_data_green_parquet\n(\n    VendorID INT ,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag char(1),\n    RatecodeID INT,\n    PULocationID INT,\n    DOLocationID INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee INT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type INT,\n    trip_type SMALLINT,\n    congestion_surcharge FLOAT\n)\nWITH (\n    LOCATION ='raw/trip_data_green_parquet/**',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=parquet_file_format\n);\n\nSELECT top 100 * from bronze.trip_data_green_parquet;\n\n--Create trip_data_green_delta table\n\n\nIF OBJECT_ID('bronze.trip_data_green_delta') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_delta;\n\ncreate EXTERNAL TABLE bronze.trip_data_green_delta\n(\n    VendorID INT ,\n    lpep_pickup_datetime DATETIME2(7),\n    lpep_dropoff_datetime DATETIME2(7),\n    store_and_fwd_flag char(1),\n    RatecodeID INT,\n    PULocationID INT,\n    DOLocationID INT,\n    passenger_count INT,\n    trip_distance FLOAT,\n    fare_amount FLOAT,\n    extra FLOAT,\n    mta_tax FLOAT,\n    tip_amount FLOAT,\n    tolls_amount FLOAT,\n    ehail_fee INT,\n    improvement_surcharge FLOAT,\n    total_amount FLOAT,\n    payment_type INT,\n    trip_type SMALLINT,\n    congestion_surcharge FLOAT\n)\nWITH (\n    LOCATION ='raw/trip_data_green_delta/',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=delta_file_format\n);\n\nSELECT top 100 * from bronze.trip_data_green_delta;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_explore_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT * \nFROM OPENROWSET(\n    BULK 'trip_type.tsv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FIELDTERMINATOR = '\\t',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n)\nWITH(\n    trip_type SMALLINT,\n    trip_type_desc VARCHAR(30)\n)\nas trip_type",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n--Create vw_rate_code view\nDROP VIEW IF EXISTS bronze.vw_rate_code;\nGO\n\nCREATE VIEW bronze.vw_rate_code\nAS\nSELECT rate_code_id,rate_code\nFROM OPENROWSET(\n    BULK 'raw/rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR ='0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n) \nWITH (\n    jsonDoc NVARCHAR(MAX)\n)\nas rate_code\n\nCROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        rate_code_id TINYINT,\n        rate_code VARCHAR(20) \n    )\nGO\n\nSELECT * FROM bronze.vw_rate_code;\n\n\n--create view vw_payment_type\n\nDROP VIEW IF EXISTS bronze.vw_payment_type;\nGO\n\nCREATE VIEW bronze.vw_payment_type\nAS\nSELECT payment_type, description\nFROM OPENROWSET(\n    BULK 'raw/payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR ='0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0a'\n) \nWITH (\n    jsonDoc NVARCHAR(MAX)\n) as payment_type\n\nCROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        payment_type SMALLINT '$.payment_type',\n        description VARCHAR(20) '$.payment_type_desc'\n    )\nGO\n\nSELECT * FROM bronze.vw_payment_type;\n\n\n--CREATE VIEW FOR trip_data_green\nDROP VIEW IF EXISTS bronze.vw_trip_data_green_csv;\nGO\n\nCREATE VIEW bronze.vw_trip_data_green_csv\nAS\nSELECT \n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'raw/trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        ROWTERMINATOR = '\\n',\n        HEADER_ROW = TRUE\n    ) WITH(\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        trip_amount FLOAT,\n        fare_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )\n    AS result\nGO\nSELECT * from bronze.vw_trip_data_green_csv\nWHERE year='2020' and month='01';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT * \nFROM OPENROWSET(\n    BULK 'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR ='0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0a'\n) \nWITH (\n    jsonDoc NVARCHAR(MAX)\n)\nas payment_type;\n\n-- Extract fields using JSON_VALUE\n\nSELECT JSON_VALUE(jsonDoc, '$.payment_type') payment_type,\n    JSON_VALUE(jsonDoc, '$.payment_type_desc') payment_type_desc\nFROM OPENROWSET(\n    BULK 'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR ='0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0a'\n) \nWITH (\n    jsonDoc NVARCHAR(MAX)\n)\nas payment_type;\n\n\n-- Specify the data type for the extracted json fields.\n\nSELECT CAST(JSON_VALUE(jsonDoc, '$.payment_type')  AS SMALLINT) payment_type,\n    CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') AS VARCHAR(15))  payment_type_desc\nFROM OPENROWSET(\n    BULK 'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR ='0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0a'\n) \nWITH (\n    jsonDoc NVARCHAR(MAX)\n)\nas payment_type;\n\n\n--Use OPENJSON function.\n\nSELECT payment_type,description\nFROM OPENROWSET(\n    BULK 'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR ='0x0b',\n    FIELDQUOTE = '0x0b'\n) \nWITH (\n    jsonDoc NVARCHAR(MAX)\n)\nas payment_type\n\nCROSS APPLY OPENJSON(jsonDoc)\nWITH(\n    payment_type SMALLINT,\n    description VARCHAR(20) '$.payment_type_desc'\n);\n\n\n--Query JSON Array\n\nSELECT CAST(JSON_VALUE(jsonDoc, '$.payment_type')  AS SMALLINT) payment_type,\n    CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc[0].value') AS VARCHAR(15))  payment_type_desc_0,\n    CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc[1].value') AS VARCHAR(15))  payment_type_desc_1\nFROM OPENROWSET(\n    BULK 'payment_type_array.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR ='0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0a'\n) \nWITH (\n    jsonDoc NVARCHAR(MAX)\n)\nas payment_type;\n\nSELECT payment_type, sub_type, payment_type_desc_value\nFROM OPENROWSET(\n    BULK 'payment_type_array.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR ='0x0b',\n    FIELDQUOTE = '0x0b'\n) \nWITH (\n    jsonDoc NVARCHAR(MAX)\n)\nas payment_type\n\nCROSS APPLY OPENJSON(jsonDoc)\nWITH(\n    payment_type SMALLINT,\n    payment_type_desc NVARCHAR(MAX) AS JSON \n)\nCROSS APPLY OPENJSON(payment_type_desc)\nWITH(\n    sub_type SMALLINT,\n    payment_type_desc_value VARCHAR(20) '$.value'\n);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n--Create taxi_zone on silver schema using CETAS\nIF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone\nGO\nCREATE EXTERNAL TABLE silver.taxi_zone\nWITH(\n    LOCATION='silver/taxi_zone',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=parquet_file_format\n)\nAS\nSELECT *\nFROM bronze.taxi_zone;\n\nSELECT * FROM silver.taxi_zone;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT *\nFROM OPENROWSET(\n    BULK 'rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR ='0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n) \nWITH (\n    jsonDoc NVARCHAR(MAX)\n)\nas rate_code\n\nCROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        rate_code_id TINYINT,\n        rate_code VARCHAR(20) \n    )\n\n--Parse formatted rate_code JSON file which is multi line file.\n\nSELECT rate_code_id,rate_code\nFROM OPENROWSET(\n    BULK 'rate_code_multi_line.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR ='0x0b',\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n) \nWITH (\n    jsonDoc NVARCHAR(MAX)\n)\nas rate_code\n\nCROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        rate_code_id TINYINT,\n        rate_code VARCHAR(20) \n    );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n\n--Create calendar on silver schema using CETAS\nIF OBJECT_ID('silver.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE silver.calendar\nGO\nCREATE EXTERNAL TABLE silver.calendar\nWITH(\n    LOCATION='silver/calendar',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=parquet_file_format\n)\nAS\nSELECT *\nFROM bronze.calendar;\n\nSELECT * FROM silver.calendar;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_trip_data_green_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=2020/month=01',\n        'trip_data_green_csv/year=2020/month=03'),\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        ROWTERMINATOR = '\\n',\n        HEADER_ROW = TRUE\n    ) AS [result];\n\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        ROWTERMINATOR = '\\n',\n        HEADER_ROW = TRUE\n    ) AS [result];\n\n    -- Metadata functions\n\n    SELECT\n    result.filename() as file_name,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        ROWTERMINATOR = '\\n',\n        HEADER_ROW = TRUE\n    ) AS [result];\n\nSELECT\n    result.filename() as file_name,\n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        ROWTERMINATOR = '\\n',\n        HEADER_ROW = TRUE\n    ) AS result\n    group by result.filename()\n    order by result.filename();\n\n    -- filter by filename\n\nSELECT\n    result.filename() as file_name,\n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        ROWTERMINATOR = '\\n',\n        HEADER_ROW = TRUE\n    ) AS result\n    WHERE result.filename() in ('green_tripdata_2020-01.csv','green_tripdata_2020-02.csv')\n    group by result.filename()\n    order by result.filename();\n\n-- Metadata file_path\n\nSELECT\n    result.filepath() as file_path,\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.filename() as file_name,\n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        ROWTERMINATOR = '\\n',\n        HEADER_ROW = TRUE\n    ) AS result\n    group by result.filepath(),result.filepath(1), result.filepath(2), result.filename()\n    order by result.filepath(),result.filepath(1), result.filepath(2),result.filename();\n\n    --use file_path in where clause\n\n\n    SELECT\n    result.filepath() as file_path,\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.filename() as file_name,\n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        ROWTERMINATOR = '\\n',\n        HEADER_ROW = TRUE\n    ) AS result\n   -- where result.filepath(1) =2020 \n     --    and result.filepath(2) in ('06','07','08')\n    group by result.filepath(),result.filepath(1), result.filepath(2), result.filename()\n    order by result.filepath(),result.filepath(1), result.filepath(2),result.filename();\n\nSELECT\n    result.filepath() as file_path,\n    result.filename() as file_name,\n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=2020/month=06/*.csv',\n        'trip_data_green_csv/year=2020/month=07/*.csv',\n        'trip_data_green_csv/year=2020/month=08/*.csv'\n        ),\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        ROWTERMINATOR = '\\n',\n        HEADER_ROW = TRUE\n    ) AS result\n   -- where result.filepath(1) =2020 \n     --    and result.filepath(2) in ('06','07','08')\n    group by result.filepath(), result.filename()\n    order by result.filepath(),result.filename();\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n--Create trip_type table on silver schema\n\nIF OBJECT_ID('silver.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_type\nGO\nCREATE EXTERNAL TABLE silver.trip_type\nWITH(\n    LOCATION='silver/trip_type',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=parquet_file_format\n)\nAS\nSELECT *\nFROM bronze.trip_type;\n\nSELECT * FROM silver.trip_type;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_explore_trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS result\n\n\n--Identify the inferred data types\n\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_parquet/year=2020/month=01/'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''PARQUET''\n    ) AS result';\n\n--Define columns and datatypes\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH(\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        trip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )\n    AS result;\n\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH(\n        trip_amount FLOAT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )\n    AS result;\n\n/*\nAssignment\n----------------\n1) Query from folders using wildcard characters\n2) use filename function\n3) query from subfolders\n4) use filepath function to select only from certain partitions\n*/\n\n\n--1) Query from folders using wildcard characters\n\nSELECT\n     top 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    AS trip_data;\n\n--2) use filename function\nSELECT\n     top 100 \n     trip_data.filename() as filename,\n     trip_data.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    AS trip_data;\n\n--3) query from subfolders\nSELECT\n     top 100 \n     trip_data.filename() as filename,\n     trip_data.filepath() as filepath,\n     trip_data.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    AS trip_data;\n\n--4) use filepath function to select only from certain partitions\nSELECT\n     trip_data.filepath(1) as year,\n     trip_data.filepath(2) as month,\n     COUNT(1) AS record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    AS trip_data\n    WHERE \n    trip_data.filepath(1) ='2020'\n    AND trip_data.filepath(2) in ('06','07','08')\n    GROUP BY trip_data.filepath(1), trip_data.filepath(2)\n    ORDER BY trip_data.filepath(1), trip_data.filepath(2)\n    ;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nGO\n\n--Create vendor table on silver schema\n\nIF OBJECT_ID('silver.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE silver.vendor\nGO\nCREATE EXTERNAL TABLE silver.vendor\nWITH(\n    LOCATION='silver/vendor',\n    DATA_SOURCE=nyc_taxi_src,\n    FILE_FORMAT=parquet_file_format\n)\nAS\nSELECT *\nFROM bronze.vendor;\n\nSELECT * FROM silver.vendor;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_explore_trip_data_green_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\nSELECT \n   TOP 100 *\n   FROM\n   OPENROWSET(\n    BULK 'trip_data_green_delta',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'DELTA'\n   ) as trip_data;\n\nEXEC sp_describe_first_result_set N'SELECT \n   TOP 100 *\n   FROM\n   OPENROWSET(\n    BULK ''trip_data_green_delta'',\n    DATA_SOURCE = ''nyc_taxi_data_raw'',\n    FORMAT = ''DELTA''\n   ) as trip_data';\n\n-- Try querying sub folders\n\nSELECT \n   TOP 100 *\n   FROM\n   OPENROWSET(\n    BULK 'trip_data_green_delta/year=2020',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'DELTA'\n   ) as trip_data;\n\nSELECT \n   TOP 100 *\n   FROM\n   OPENROWSET(\n    BULK 'trip_data_green_delta',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'DELTA'\n   )\n   WITH(\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        trip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT,\n        year VARCHAR(4),\n        month VARCHAR(2)\n    ) \n   as trip_data;\n\n   --Mandatory to choose the partitioning columns year and month\n\nSELECT \n   TOP 100 *\n   FROM\n   OPENROWSET(\n    BULK 'trip_data_green_delta',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'DELTA'\n   )\n   WITH(\n        VendorID INT,\n        trip_type INT,\n        year VARCHAR(4),\n        month VARCHAR(2)\n    ) \n   as trip_data;\n\n\n\n   SELECT \n   count(distinct payment_type)\n   FROM\n   OPENROWSET(\n    BULK 'trip_data_green_delta',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'DELTA'\n   )\n   as trip_data;\n\n   SELECT \n   count(distinct payment_type)\n   FROM\n   OPENROWSET(\n    BULK 'trip_data_green_delta',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'DELTA'\n   ) as trip_data\n   WHERE year='2020' and month='01'\n   ;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query Parquet files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read parquet file */\nSELECT TOP 10 *\nFROM OPENROWSET(\n    BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n    FORMAT = 'parquet') as rows\n\n\n/* Explicitly specify schema */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n        FORMAT = 'parquet'\n    ) WITH ( date_rep date, cases int, geo_id varchar(6) ) as rows\n\n\n/* New York City Taxi opendata set */\n\n/* Query set of parquet files */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) WITH (\n        tpepPickupDateTime DATETIME2,\n        passengerCount INT\n    ) AS nyc\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n\n\n/* Automatic schema inference */\nSELECT TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS nyc\n\n\n/* Query partitioned data */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) nyc\nWHERE\n    nyc.filepath(1) = 2017\n    AND nyc.filepath(2) IN (1, 2, 3)\n    AND tpepPickupDateTime BETWEEN CAST('1/1/2017' AS datetime) AND CAST('3/31/2017' AS datetime)\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}