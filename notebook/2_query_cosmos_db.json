{
	"name": "2_query_cosmos_db",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "coursepool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8b863f9d-78d6-447b-a7b5-655f76fc0211"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/78a9f5d1-6721-447a-bf45-162596d2c6be/resourceGroups/synapse-course-rg/providers/Microsoft.Synapse/workspaces/synapse-course-saku2020-ws/bigDataPools/coursepool",
				"name": "coursepool",
				"type": "Spark",
				"endpoint": "https://synapse-course-saku2020-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/coursepool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Query Cosmos DB from Synapse"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df =spark.read.format(\"cosmos.olap\")\\\n",
					"            .option(\"spark.synapse.linkedService\",\"ls_cosmos_db_nyc_taxi_data\")\\\n",
					"            .option(\"spark.cosmos.container\",\"Heartbeat\")\\\n",
					"            .load()\n",
					"\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df.limit(10))"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.write.format(\"cosmos.oltp\")\\\n",
					".option(\"spark.synapse.linkedService\",\"ls_cosmos_db_nyc_taxi_data\")\\\n",
					".option(\"spark.cosmos.container\",\"Heartbeat1\")\\\n",
					".mode(\"append\")\\\n",
					".save()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Try with Spark SQL"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE DATABASE IF NOT EXISTS mydb;\n",
					"\n",
					"USE mydb;\n",
					"\n",
					"-- Create a table from the Cosmos DB container\n",
					"CREATE OR REPLACE TABLE heartbeats using cosmos.olap options (\n",
					"    spark.synapse.linkedService 'ls_cosmos_db_nyc_taxi_data',\n",
					"    spark.cosmos.container 'Heartbeat1'\n",
					");\n",
					"\n",
					"-- Query the table\n",
					"SELECT *\n",
					"FROM heartbeats;"
				],
				"execution_count": 9
			}
		]
	}
}